[{"C:\\Users\\jdhus\\OneDrive\\Documents\\Shopify Front End Challenge\\the-shoppies\\src\\index.js":"1","C:\\Users\\jdhus\\OneDrive\\Documents\\Shopify Front End Challenge\\the-shoppies\\src\\App.js":"2"},{"size":219,"mtime":1610230335753,"results":"3","hashOfConfig":"4"},{"size":4104,"mtime":1610599039874,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"18qjmlb",{"filePath":"9","messages":"10","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\jdhus\\OneDrive\\Documents\\Shopify Front End Challenge\\the-shoppies\\src\\index.js",[],["12","13"],"C:\\Users\\jdhus\\OneDrive\\Documents\\Shopify Front End Challenge\\the-shoppies\\src\\App.js",["14","15"],"import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      query: '',\n      results: [],\n      nominations: []\n    }\n\n    let storedNominations = JSON.parse(sessionStorage.getItem('storedNominations'))\n    if (storedNominations != null && storedNominations.length > 0) {\n      this.state.nominations = storedNominations\n    }\n  }\n\n  handleRemoveButtonPress = (event) => {\n    event.preventDefault()  \n    \n    let updatedNominations = []\n    updatedNominations.push.apply(updatedNominations, this.state.nominations)\n    updatedNominations.splice(updatedNominations.indexOf(event.target.value), 1)\n\n    this.setState({\n      query: this.state.query,\n      results: this.state.results,\n      nominations: updatedNominations\n    })\n\n    sessionStorage.setItem('storedNominations', JSON.stringify(updatedNominations))\n  }\n\n  handleNominateButtonPress = (event) => {\n    event.preventDefault()  \n\n    let updatedNominations = []\n    updatedNominations.push.apply(updatedNominations, this.state.nominations)\n    updatedNominations.push(event.target.value)\n\n    this.setState({\n      query: this.state.query,\n      results: this.state.results,\n      nominations: updatedNominations\n    })\n\n    sessionStorage.setItem('storedNominations', JSON.stringify(updatedNominations))\n  }\n\n  handleInputChange = (event) => {\n    event.preventDefault()\n\n    const api = 'http://www.omdbapi.com/?apikey=b2798bd0&s=' + event.target.value\n\n    fetch(api)\n      .then((response) => response.json())\n      .then((data) => {\n        let movies = []\n        if (data.Response === \"True\") {\n          let i;\n          for (i = 0; i < data.Search.length; i++) {\n            movies.push(data.Search[i].Title + \" (\" + data.Search[i].Year + \")\")\n          }\n        }\n        return movies\n      })\n      .then((movies) => {\n        this.setState({\n          query: event.target.value,\n          results: movies,\n          nominations: this.state.nominations\n        })\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div class=\"Alert\" style={{display: this.state.nominations.length == 5 ? 'block' : 'none' }}>\n          <strong>Success!</strong> You have selected 5 nominations.\n        </div>\n\n        <div className=\"Header\">\n          <h3>\n            <img class='Logo' src='the-shoppies-logo.png'></img>\n            The Shoppies\n          </h3>\n        </div>\n\n        <div className=\"Row\">\n          <div className=\"Card\">\n            <label>Movie title</label>\n            <input className=\"Search\" type=\"text\" placeholder=\"Search OMDB...\" onChange={this.handleInputChange}></input>\n          </div>\n        </div>\n\n        <div className=\"Row\">\n          <div className=\"Card\">\n            <label><b>Results for \"{this.state.query}\"</b></label>\n            <ul>\n              {\n                this.state.results.map((item) => {\n                  return(\n                    <li key={item}>\n                      <span>\n                        {item}\n                      </span>\n                      <span>\n                        <button className=\"Button\" type=\"button\" value={item} onClick={this.handleNominateButtonPress} disabled={this.state.nominations.includes(item) ? true : false}>\n                          Nominate\n                        </button>\n                      </span>\n                    </li>\n                  )\n                })\n              }\n            </ul>\n          </div>\n          <div className=\"Card\">\n            <label><b>Nominations</b></label>\n            <ul>\n              {\n                this.state.nominations.map((item) => {\n                  return(\n                    <li key={item}>\n                      <span>{item}</span>\n                      <span><button className=\"Button\" type=\"button\" value={item} onClick={this.handleRemoveButtonPress}>Remove</button></span>\n                    </li>\n                  )\n                })\n              }\n            </ul>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default App",{"ruleId":"16","replacedBy":"17"},{"ruleId":"18","replacedBy":"19"},{"ruleId":"20","severity":1,"message":"21","line":81,"column":75,"nodeType":"22","messageId":"23","endLine":81,"endColumn":77},{"ruleId":"24","severity":1,"message":"25","line":87,"column":13,"nodeType":"26","endLine":87,"endColumn":59},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]